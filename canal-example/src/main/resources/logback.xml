<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
	<springProfile name="dev">
		<property name="LOG_PATH" value="/Users/lizhenjun/persional/canal-client/logs"/>
		<property name="ENCODING" value="UTF-8"/>
		<!-- 彩色日志格式 -->
		<property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}) %clr([%thread]) %clr([%-5level]) %clr([${PID:- }]){magenta} %clr(%logger{50}){cyan} %msg%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
	</springProfile>

	<!-- 彩色日志 -->
	<!-- 彩色日志依赖的渲染类 -->
	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
	<conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

	<!--输出到控制台-->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<!--设置输出格式-->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<!--设置编码-->
			<charset>${ENCODING}</charset>
		</encoder>
	</appender>

	<!--文件输出,时间窗口滚动-->
	<appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名,指定最新的文件名，其他文件名使用FileNamePattern -->
		<File>${LOG_PATH}/file-error.log</File>
		<!--文件滚动模式-->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--日志文件输出的文件名,可设置文件类型为gz,开启文件压缩-->
			<FileNamePattern>${LOG_PATH}/file-error/file-error.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
			<!--日志文件保留天数-->
			<MaxHistory>90</MaxHistory>
			<!--按大小分割同一天的-->
			<maxFileSize>50MB</maxFileSize>
		</rollingPolicy>

		<!--输出格式-->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<!--设置编码-->
			<charset>${ENCODING}</charset>
		</encoder>
		<!-- 此日志文档只记录error级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!--文件输出,时间窗口滚动-->
	<appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名,指定最新的文件名，其他文件名使用FileNamePattern -->
		<File>${LOG_PATH}/file-warn.log</File>
		<!--文件滚动模式-->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--日志文件输出的文件名,可设置文件类型为gz,开启文件压缩-->
			<FileNamePattern>${LOG_PATH}/file-warn/file-warn.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
			<!--日志文件保留天数-->
			<MaxHistory>90</MaxHistory>
			<!--按大小分割同一天的-->
			<maxFileSize>50MB</maxFileSize>
		</rollingPolicy>

		<!--输出格式-->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<!--设置编码-->
			<charset>${ENCODING}</charset>
		</encoder>
		<!-- 此日志文档只记录warn级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>warn</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!--文件输出,时间窗口滚动-->
	<appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名,指定最新的文件名，其他文件名使用FileNamePattern -->
		<File>${LOG_PATH}/file-info.log</File>
		<!--文件滚动模式-->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--日志文件输出的文件名,可设置文件类型为gz,开启文件压缩-->
			<FileNamePattern>${LOG_PATH}/file-info/file-info.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
			<!--日志文件保留天数-->
			<MaxHistory>90</MaxHistory>
			<!--按大小分割同一天的-->
			<maxFileSize>50MB</maxFileSize>
		</rollingPolicy>

		<!--输出格式-->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<!--设置编码-->
			<charset>${ENCODING}</charset>
		</encoder>
		<!-- 此日志文档只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!--文件输出,时间窗口滚动-->
	<appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名,指定最新的文件名，其他文件名使用FileNamePattern -->
		<File>${LOG_PATH}/file-debug.log</File>
		<!--文件滚动模式-->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--日志文件输出的文件名,可设置文件类型为gz,开启文件压缩-->
			<FileNamePattern>${LOG_PATH}/file-debug/file-debug.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
			<!--日志文件保留天数-->
			<MaxHistory>90</MaxHistory>
			<!--按大小分割同一天的-->
			<maxFileSize>50MB</maxFileSize>
		</rollingPolicy>

		<!--输出格式-->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<!--设置编码-->
			<charset>${ENCODING}</charset>
		</encoder>
		<!-- 此日志文档只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>debug</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="INFO_FILE"/>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-DEBUG" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="DEBUG_FILE"/>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-WARN" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="WARN_FILE"/>
	</appender>

	<!-- 异步输出 -->
	<appender name="ASYNC-ERROR" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="ERROR_FILE"/>
	</appender>

	<!-- 系统模块日志级别控制  -->
	<logger name="com.lizhenjun.canal" level="info" />
	<!-- Spring日志级别控制  -->
	<logger name="org.springframework" level="warn" />

	<!--配置日志异步输出-->
	<root level="info,warn">
		<appender-ref ref="CONSOLE"/>
		<appender-ref ref="ASYNC-ERROR"/>
		<appender-ref ref="ASYNC-WARN"/>
		<appender-ref ref="ASYNC-INFO"/>
		<appender-ref ref="ASYNC-DEBUG"/>
	</root>
</configuration> 